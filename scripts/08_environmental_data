# 08_environmental_data_integration.R
# Environmental Data analysis for Humpback Whale DSM Analysis

# PURPOSE:
# This script investigates environmental variables (SST, SSTA, ice concentration and ice lag) 
# with the survey data (segments and observations) to enable environmental covariate 
# analysis in DSM models. This addresses Aim 3 of the study: investigating how 
# environmental variables influence whale abundance and distribution.
#
# ENVIRONMENTAL DATA SOURCE:
# Environmental data was provided by Angus Henderson using raadtools and includes:
# - Sea Surface Temperature (SST)
# - Sea Surface Temperature Anomaly (SSTA) 
# - Ice concentration
# - Bathymetry
# - Distance to coastline
# - Monthly temporal resolution (Nov-Mar)

# Load required libraries
library(sf)
library(dplyr)
library(tidyverse)
library(Distance)
library(dsm)
library(mgcv)
library(ggplot2)
library(lubridate)

# Load your existing segmented data/ don't worry about the reprojected yet just want to focus on attaching enviros
load("C:/Users/gingerk/OneDrive - University of Tasmania/2025/Kleehammer masters/Code/Humpback whales_Thesis R code/2_segmented data/3.2_segs_ginger_5k_07-25.Rdata")
segs_existing <- segs %>% 
  st_drop_geometry() %>% 
  filter(Sightability %in% c("3","4","5")) %>% 
  filter(Season != "21/22") %>%
  mutate(month = month(st),
         yday = yday(st),
         month.x = factor(month,
                          levels = c(11, 12, 1, 2, 3),
                          labels = c("1", "2", "3", "4", "5"),
                          ordered = TRUE),
         month.n = month.x %>%
           as.integer(),
         d = ifelse(yday > 180 & yday <= 365, yday - 365 + 62, yday + 62))%>% 
  mutate(Effort=Effort/2) 
# Load the new environmental data
load("C:/Users/gingerk/OneDrive - University of Tasmania/2025/Kleehammer masters/Code/Humpback whales_Thesis R code/4_environmental_data/ginger_segs.Rdata")


# Merge by seg_id
segs_with_env <- segs_existing %>%
  left_join(segs, by = "seg_id", suffix = c("", "_env"))

print(names(segs))
str(segs)

#making sure i have the right col names for dsm

segs_with_env <- dplyr::rename(segs_with_env, Sample.Label = seg_id)

#fixing the data to be in the right form
segs_with_env <- segs_with_env %>% mutate(Effort = Effort %>% as.numeric()) %>% filter(Effort>100)


#segs has already been filtered and is ready to go. 
#filtering the obs 
obs_f <- obs %>% 
  st_drop_geometry() %>% 
  mutate(Angle_shift = abs(ifelse(Angle >180, Angle-360, Angle))) %>% 
  mutate(BestNumber = cut(BestNumber, breaks = c(0,1,2,3,4,10,Inf), 
                          labels = c("1","2", "3", "4","5+", "10+"))) %>% 
  filter(Sightability %in% c("3","4","5")) %>% 
  filter(Platform == "BR", SeaState < 6) %>% 
  mutate(dist_type2 = case_when( dist_type == "ret"~ "ret",
                                 dist_type %in% c( "land", "retland") ~ "land",
                                 dist_type == "close" ~ "close",
                                 TRUE ~ "other")
  ) %>% 
  filter(Angle > 270 | Angle < 90) %>% 
  mutate(Speedbined = case_when((Speed*0.54) < 8 ~ "slow",
                                (Speed*0.54) > 8 & (Speed*0.54) <12 ~ "good",
                                (Speed*0.54) >12 ~"fast")) %>% 
  filter(Angle <361) %>% 
  filter(Season != "21/22")
# Making sure thr right col names are added for DSM 
obs_f <- dplyr::rename(obs_f, Sample.Label = seg_id)

obs_f <- obs_f %>% 
  mutate(object = 1:length(Id))
obs_f <- dplyr::rename(obs_f, size = BestNumber)
obs_f <- obs_f %>% filter(distance <= 3000)

obs_f$size<- as.numeric(obs_f$size)
obs_f <- obs_f %>% filter(!is.na(size))

# Adding the reprojection stage
rp  <- "+proj=laea +lat_0=-90 +lon_0=-105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
segs_rp <- segs_with_env %>% 
  st_drop_geometry() %>% 
  st_as_sf(coords=c("LonM", "LatM"), crs = 4326) %>% 
  st_transform(rp) %>% 
  mutate(m = month(st),
         month.x = factor(m,
                          levels = c(11, 12, 1, 2, 3),
                          labels = c("1", "2", "3", "4", "5"),
                          ordered = TRUE))%>% 
  mutate(x = st_coordinates(geometry)[,"X"],
         y = st_coordinates(geometry)[,"Y"])



obs_rp <- obs_f%>% 
  st_drop_geometry() %>% 
  st_as_sf(coords=c("lon", "lat"), crs = 4326) %>% 
  st_transform(rp) %>% 
  mutate(m = month(st),
         month.x = factor(m,
                          levels = c(11, 12, 1, 2, 3),
                          labels = c("1", "2", "3", "4", "5"),
                          ordered = TRUE)) %>% 
  mutate(x = st_coordinates(geometry)[,"X"],
         y = st_coordinates(geometry)[,"Y"])
